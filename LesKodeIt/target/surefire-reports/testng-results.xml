<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="12" passed="11" failed="1" skipped="0">
  <reporter-output>
    <line>
      <![CDATA[Extent Report DirectoryC:\Users\mdshu\Downloads\Bootcamp2020Selenium\LesKodeIt\target\surefire-reports\html]]>
    </line>
  </reporter-output>
  <suite started-at="2020-02-20T20:26:02 EST" name="LetsKodeIt Automation Script" finished-at="2020-02-20T20:28:43 EST" duration-ms="160914">
    <groups>
    </groups>
    <test started-at="2020-02-20T20:26:02 EST" name="Letskodeit Home" finished-at="2020-02-20T20:28:43 EST" duration-ms="160914">
      <class name="testhomepage.TestHomepage">
        <test-method is-config="true" signature="extentSetup(org.testng.ITestContext)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:02 EST" name="extentSetup" finished-at="2020-02-20T20:26:02 EST" duration-ms="250" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@467b684d]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Extent Report DirectoryC:\Users\mdshu\Downloads\Bootcamp2020Selenium\LesKodeIt\target\surefire-reports\html]]>
            </line>
          </reporter-output>
        </test-method> <!-- extentSetup -->
        <test-method is-config="true" signature="setUp(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:02 EST" name="setUp" finished-at="2020-02-20T20:26:10 EST" duration-ms="7122" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[browserstack]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[windows]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[79]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[https://learn.letskodeit.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startExtent(java.lang.reflect.Method)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:10 EST" name="startExtent" finished-at="2020-02-20T20:26:10 EST" duration-ms="19" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testhomepage.TestHomepage.testPracticeButton() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startExtent -->
        <test-method signature="testPracticeButton()[pri:1, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:10 EST" name="testPracticeButton" finished-at="2020-02-20T20:26:12 EST" duration-ms="2146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPracticeButton -->
        <test-method is-config="true" signature="afterEachTestMethod(org.testng.ITestResult)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:12 EST" name="afterEachTestMethod" finished-at="2020-02-20T20:26:13 EST" duration-ms="1278" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testPracticeButton status=SUCCESS method=TestHomepage.testPracticeButton()[pri:1, instance:testhomepage.TestHomepage@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTestMethod -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:13 EST" name="cleanUp" finished-at="2020-02-20T20:26:13 EST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setUp(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:13 EST" name="setUp" finished-at="2020-02-20T20:26:19 EST" duration-ms="6356" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[browserstack]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[windows]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[79]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[https://learn.letskodeit.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startExtent(java.lang.reflect.Method)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:19 EST" name="startExtent" finished-at="2020-02-20T20:26:19 EST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testhomepage.TestHomepage.testSelectClassBar() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startExtent -->
        <test-method signature="testSelectClassBar()[pri:2, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:19 EST" name="testSelectClassBar" finished-at="2020-02-20T20:26:23 EST" duration-ms="3163" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSelectClassBar -->
        <test-method is-config="true" signature="afterEachTestMethod(org.testng.ITestResult)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:23 EST" name="afterEachTestMethod" finished-at="2020-02-20T20:26:23 EST" duration-ms="804" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSelectClassBar status=SUCCESS method=TestHomepage.testSelectClassBar()[pri:2, instance:testhomepage.TestHomepage@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTestMethod -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:23 EST" name="cleanUp" finished-at="2020-02-20T20:26:23 EST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setUp(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:23 EST" name="setUp" finished-at="2020-02-20T20:26:29 EST" duration-ms="5534" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[browserstack]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[windows]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[79]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[https://learn.letskodeit.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startExtent(java.lang.reflect.Method)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:29 EST" name="startExtent" finished-at="2020-02-20T20:26:29 EST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testhomepage.TestHomepage.clickOnRadioButton() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startExtent -->
        <test-method signature="clickOnRadioButton()[pri:3, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:29 EST" name="clickOnRadioButton" finished-at="2020-02-20T20:26:33 EST" duration-ms="4202" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickOnRadioButton -->
        <test-method is-config="true" signature="afterEachTestMethod(org.testng.ITestResult)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:33 EST" name="afterEachTestMethod" finished-at="2020-02-20T20:26:34 EST" duration-ms="783" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickOnRadioButton status=SUCCESS method=TestHomepage.clickOnRadioButton()[pri:3, instance:testhomepage.TestHomepage@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTestMethod -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:34 EST" name="cleanUp" finished-at="2020-02-20T20:26:34 EST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setUp(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:34 EST" name="setUp" finished-at="2020-02-20T20:26:40 EST" duration-ms="6249" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[browserstack]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[windows]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[79]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[https://learn.letskodeit.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startExtent(java.lang.reflect.Method)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:40 EST" name="startExtent" finished-at="2020-02-20T20:26:40 EST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testhomepage.TestHomepage.clickOnSelectButton() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startExtent -->
        <test-method signature="clickOnSelectButton()[pri:4, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:40 EST" name="clickOnSelectButton" finished-at="2020-02-20T20:26:46 EST" duration-ms="5719" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickOnSelectButton -->
        <test-method is-config="true" signature="afterEachTestMethod(org.testng.ITestResult)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:46 EST" name="afterEachTestMethod" finished-at="2020-02-20T20:26:47 EST" duration-ms="1162" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickOnSelectButton status=SUCCESS method=TestHomepage.clickOnSelectButton()[pri:4, instance:testhomepage.TestHomepage@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTestMethod -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:47 EST" name="cleanUp" finished-at="2020-02-20T20:26:47 EST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setUp(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:47 EST" name="setUp" finished-at="2020-02-20T20:26:53 EST" duration-ms="5925" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[browserstack]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[windows]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[79]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[https://learn.letskodeit.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startExtent(java.lang.reflect.Method)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:53 EST" name="startExtent" finished-at="2020-02-20T20:26:53 EST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testhomepage.TestHomepage.clickOnSelectMultiButton() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startExtent -->
        <test-method signature="clickOnSelectMultiButton()[pri:5, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:53 EST" name="clickOnSelectMultiButton" finished-at="2020-02-20T20:26:58 EST" duration-ms="5474" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickOnSelectMultiButton -->
        <test-method is-config="true" signature="afterEachTestMethod(org.testng.ITestResult)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:58 EST" name="afterEachTestMethod" finished-at="2020-02-20T20:26:59 EST" duration-ms="801" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickOnSelectMultiButton status=SUCCESS method=TestHomepage.clickOnSelectMultiButton()[pri:5, instance:testhomepage.TestHomepage@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTestMethod -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:59 EST" name="cleanUp" finished-at="2020-02-20T20:26:59 EST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setUp(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:26:59 EST" name="setUp" finished-at="2020-02-20T20:27:08 EST" duration-ms="8536" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[browserstack]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[windows]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[79]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[https://learn.letskodeit.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startExtent(java.lang.reflect.Method)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:08 EST" name="startExtent" finished-at="2020-02-20T20:27:08 EST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testhomepage.TestHomepage.clickOnCheckButton() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startExtent -->
        <test-method signature="clickOnCheckButton()[pri:6, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:08 EST" name="clickOnCheckButton" finished-at="2020-02-20T20:27:13 EST" duration-ms="5461" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clickOnCheckButton -->
        <test-method is-config="true" signature="afterEachTestMethod(org.testng.ITestResult)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:13 EST" name="afterEachTestMethod" finished-at="2020-02-20T20:27:14 EST" duration-ms="857" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=clickOnCheckButton status=SUCCESS method=TestHomepage.clickOnCheckButton()[pri:6, instance:testhomepage.TestHomepage@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTestMethod -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:14 EST" name="cleanUp" finished-at="2020-02-20T20:27:14 EST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setUp(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:14 EST" name="setUp" finished-at="2020-02-20T20:27:23 EST" duration-ms="8777" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[browserstack]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[windows]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[79]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[https://learn.letskodeit.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startExtent(java.lang.reflect.Method)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:23 EST" name="startExtent" finished-at="2020-02-20T20:27:23 EST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testhomepage.TestHomepage.newWindowOpen() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startExtent -->
        <test-method signature="newWindowOpen()[pri:7, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:23 EST" name="newWindowOpen" finished-at="2020-02-20T20:27:29 EST" duration-ms="6473" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newWindowOpen -->
        <test-method is-config="true" signature="afterEachTestMethod(org.testng.ITestResult)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:29 EST" name="afterEachTestMethod" finished-at="2020-02-20T20:27:30 EST" duration-ms="847" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=newWindowOpen status=SUCCESS method=TestHomepage.newWindowOpen()[pri:7, instance:testhomepage.TestHomepage@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTestMethod -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:30 EST" name="cleanUp" finished-at="2020-02-20T20:27:30 EST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setUp(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:30 EST" name="setUp" finished-at="2020-02-20T20:27:37 EST" duration-ms="7082" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[browserstack]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[windows]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[79]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[https://learn.letskodeit.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startExtent(java.lang.reflect.Method)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:37 EST" name="startExtent" finished-at="2020-02-20T20:27:37 EST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testhomepage.TestHomepage.newWindowOpen1() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startExtent -->
        <test-method signature="newWindowOpen1()[pri:8, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:37 EST" name="newWindowOpen1" finished-at="2020-02-20T20:27:45 EST" duration-ms="7309" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newWindowOpen1 -->
        <test-method is-config="true" signature="afterEachTestMethod(org.testng.ITestResult)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:45 EST" name="afterEachTestMethod" finished-at="2020-02-20T20:27:46 EST" duration-ms="941" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=newWindowOpen1 status=SUCCESS method=TestHomepage.newWindowOpen1()[pri:8, instance:testhomepage.TestHomepage@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTestMethod -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:46 EST" name="cleanUp" finished-at="2020-02-20T20:27:46 EST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setUp(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:46 EST" name="setUp" finished-at="2020-02-20T20:27:53 EST" duration-ms="7863" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[browserstack]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[windows]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[79]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[https://learn.letskodeit.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startExtent(java.lang.reflect.Method)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:53 EST" name="startExtent" finished-at="2020-02-20T20:27:53 EST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testhomepage.TestHomepage.alertHandleAccept() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startExtent -->
        <test-method signature="alertHandleAccept()[pri:9, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:53 EST" name="alertHandleAccept" finished-at="2020-02-20T20:27:58 EST" duration-ms="4177" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- alertHandleAccept -->
        <test-method is-config="true" signature="afterEachTestMethod(org.testng.ITestResult)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:58 EST" name="afterEachTestMethod" finished-at="2020-02-20T20:27:58 EST" duration-ms="810" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=alertHandleAccept status=SUCCESS method=TestHomepage.alertHandleAccept()[pri:9, instance:testhomepage.TestHomepage@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTestMethod -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:58 EST" name="cleanUp" finished-at="2020-02-20T20:27:58 EST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setUp(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:27:58 EST" name="setUp" finished-at="2020-02-20T20:28:04 EST" duration-ms="5690" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[browserstack]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[windows]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[79]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[https://learn.letskodeit.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startExtent(java.lang.reflect.Method)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:04 EST" name="startExtent" finished-at="2020-02-20T20:28:04 EST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testhomepage.TestHomepage.alertHandleCancle() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startExtent -->
        <test-method signature="alertHandleCancle()[pri:10, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:04 EST" name="alertHandleCancle" finished-at="2020-02-20T20:28:08 EST" duration-ms="4265" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- alertHandleCancle -->
        <test-method is-config="true" signature="afterEachTestMethod(org.testng.ITestResult)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:08 EST" name="afterEachTestMethod" finished-at="2020-02-20T20:28:09 EST" duration-ms="780" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=alertHandleCancle status=SUCCESS method=TestHomepage.alertHandleCancle()[pri:10, instance:testhomepage.TestHomepage@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTestMethod -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:09 EST" name="cleanUp" finished-at="2020-02-20T20:28:09 EST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setUp(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:09 EST" name="setUp" finished-at="2020-02-20T20:28:17 EST" duration-ms="8105" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[browserstack]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[windows]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[79]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[https://learn.letskodeit.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="getTable()[pri:11, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:17 EST" name="getTable" finished-at="2020-02-20T20:28:21 EST" duration-ms="4150" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTable -->
        <test-method is-config="true" signature="startExtent(java.lang.reflect.Method)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:17 EST" name="startExtent" finished-at="2020-02-20T20:28:17 EST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testhomepage.TestHomepage.getTable() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startExtent -->
        <test-method is-config="true" signature="afterEachTestMethod(org.testng.ITestResult)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:21 EST" name="afterEachTestMethod" finished-at="2020-02-20T20:28:22 EST" duration-ms="776" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getTable status=SUCCESS method=TestHomepage.getTable()[pri:11, instance:testhomepage.TestHomepage@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTestMethod -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:22 EST" name="cleanUp" finished-at="2020-02-20T20:28:22 EST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setUp(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:22 EST" name="setUp" finished-at="2020-02-20T20:28:31 EST" duration-ms="8734" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[browserstack]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[windows]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[79]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[https://learn.letskodeit.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startExtent(java.lang.reflect.Method)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:31 EST" name="startExtent" finished-at="2020-02-20T20:28:31 EST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testhomepage.TestHomepage.testiFrame()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startExtent -->
        <test-method signature="testiFrame()[pri:12, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:31 EST" name="testiFrame" finished-at="2020-02-20T20:28:41 EST" duration-ms="10087" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"css selector","selector":"*[name='iframe-name']"}
  (Session info: chrome=80.0.3987.87)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'SHUVRO', ip: '10.11.11.164', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '13.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 80.0.3987.87, chrome: {chromedriverVersion: 79.0.3945.36 (3582db32b3389..., userDataDir: C:\Users\mdshu\AppData\Loca...}, goog:chromeOptions: {debuggerAddress: localhost:59121}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 828c5e4cddd5b28befc024f76fc2d8f3
*** Element info: {Using=name, value=iframe-name}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"css selector","selector":"*[name='iframe-name']"}
  (Session info: chrome=80.0.3987.87)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'SHUVRO', ip: '10.11.11.164', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '13.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 80.0.3987.87, chrome: {chromedriverVersion: 79.0.3945.36 (3582db32b3389..., userDataDir: C:\Users\mdshu\AppData\Loca...}, goog:chromeOptions: {debuggerAddress: localhost:59121}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 828c5e4cddd5b28befc024f76fc2d8f3
*** Element info: {Using=name, value=iframe-name}
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByName(RemoteWebDriver.java:404)
at org.openqa.selenium.By$ByName.findElement(By.java:284)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at com.sun.proxy.$Proxy13.getWrappedElement(Unknown Source)
at org.openqa.selenium.remote.internal.WebElementToJsonConverter.apply(WebElementToJsonConverter.java:50)
at org.openqa.selenium.remote.RemoteWebDriver$RemoteTargetLocator.frame(RemoteWebDriver.java:891)
at common.WebAPI.iframeHandle(WebAPI.java:464)
at testhomepage.TestHomepage.testiFrame(TestHomepage.java:123)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1507)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testiFrame -->
        <test-method is-config="true" signature="afterEachTestMethod(org.testng.ITestResult)[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:41 EST" name="afterEachTestMethod" finished-at="2020-02-20T20:28:43 EST" duration-ms="2380" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testiFrame status=FAILURE method=TestHomepage.testiFrame()[pri:12, instance:testhomepage.TestHomepage@1d548a08] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachTestMethod -->
        <test-method is-config="true" signature="cleanUp()[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:43 EST" name="cleanUp" finished-at="2020-02-20T20:28:43 EST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="generateReport()[pri:0, instance:testhomepage.TestHomepage@1d548a08]" started-at="2020-02-20T20:28:44 EST" name="generateReport" finished-at="2020-02-20T20:28:44 EST" duration-ms="59" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReport -->
      </class> <!-- testhomepage.TestHomepage -->
    </test> <!-- Letskodeit Home -->
  </suite> <!-- LetsKodeIt Automation Script -->
</testng-results>
